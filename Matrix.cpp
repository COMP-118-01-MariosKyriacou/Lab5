/**
 * \file Matrix.cpp
 * \brief Provides a set of functions
 * \details In this file, we implement various utility functions for working with a fixed-size 2D array (matrix) of double values. These utilities are structured around a matrix defined by a constant number of columns (Globals::MAX_COL) and a variable number of rows (maxRow, passed as a parameter).
 * \author Marios Kyriacou (U244N0037)
 * \date 2025
 * \version 0.1
 * \copyright GNU Public License
 */

#include <iostream>
#include <cstdlib>
#include "Matrix.h"
#include "namespaces.h"

 /**
  * In this function, we sum up all of the items in the row provided by the user
  * @param matrix A constant parameter where it can't be changed with the matrix array
  * @param row A constant variable which holds the value of the row that the user provided
  * @param maxRow A constant variable with the maximum row number in order to check the row
  * @return If the row provided by the user is > maxRow or the row provided is < 0 then it returns 0 otherwise it returns the total of the row
  */
double sumOfRow(const double matrix[][Globals::MAX_COL], const int row, const int maxRow) {
    double total = 0;

    if (row > maxRow || row < 0) {
        return 0;
    }

    for (int i = 0; i < Globals::MAX_COL; i++) {
        total += matrix[row][i];
    }

    return total;
}

/**
 * In this function, we sum up all of the items of the matrix in the column provided by the user
 * @param matrix A constant parameter where it can't be changed with the matrix array
 * @param column A constant variable which holds the value of the column that the user provided
 * @param maxRow A constant variable with the maximum row number in order to loop through the rows
 * @return If the column provided is > Globals::MAX_COL or <0 then it returns 0, otherwise it returns the total of the column
 */
double sumOfCol(const double matrix[][Globals::MAX_COL], const int column, const int maxRow) {
    double total = 0;

    if (column > Globals::MAX_COL - 1 || column < 0) {
        return 0;
    }

    for (int i = 0; i < maxRow; i++) {
        total += matrix[i][column];
    }

    return total;
}

/**
 * In this function, we fill the matrix[][] array with random values generated from the cstdlib. There is no limit on the number.
 * @param matrix A parameter where we can pass the random number generated by rand()
 * @param maxRow A constant variable with the maximum row number in order to loop through the rows
 */
void fillWithRandomNum(double matrix[][Globals::MAX_COL], const int maxRow) {
    for (int i = 0; i < maxRow; i++) {
        for (int j = 0; j < Globals::MAX_COL; j++) {
            matrix[i][j] = rand() % 20000; // Limit of 20000 in order to be able to see the numbers
        }
    }
};

/**
 * In this function, we print out the matrix[][] array. After each row, we add a new line
 * @param matrix A constant variable with the matrix in order to read and display it
 * @param maxRow A constant variable of the maximum amount of rows in the array
 */
void printMatrix(const double matrix[][Globals::MAX_COL], const int maxRow) {
    for (int i = 0; i < maxRow; i++) {
        for (int j = 0; j < Globals::MAX_COL; j++) {
            std::cout << matrix[i][j] << " ";
        }

        std::cout << std::endl;
    }
}

/**
 * In this function, we find the maximum value in the matrix
 * @param matrix A constant variable with the matrix in order to read and find the maximum number
 * @param maxRow A constant variable of the maximum amount of rows in the array
 * @return Returns the maximum value of the matrix
 */
double maximumValue(const double matrix[][Globals::MAX_COL], const int maxRow) {
    double tempMax = matrix[0][0];

    for (int i = 0; i < maxRow; i++) {
        for (int j = 0; j < Globals::MAX_COL; j++) {
            if (tempMax < matrix[i][j]) tempMax = matrix[i][j];
        }
    }

    return tempMax;
}

/**
 * In this function, we transpose the matrix that has been provided and return the value into the transposed 2d array
 * @param matrix Initial 2d array
 * @param transposed Variable where transposed matrix will be stored
 * @param maxRow A constant variable of the maximum amount of rows in the array
 */
void transposedMatrix(const double matrix[][Globals::MAX_COL], double transposed[][Globals::MAX_COL], const int maxRow) {
    for (int i = 0; i < maxRow; i++) {
        for (int j = 0; j < Globals::MAX_COL; j++) {
            transposed[j][i] = matrix[i][j];
        }
    }
}

/**
 * In this function, we add up all of the elements of the matrix and then find the average
 * @param matrix A constant variable of the matrix
 * @param maxRow A constant variable of the maximum amount of rows in the array
 * @return Returns the average of all the elements backed up
 */
double averageOfElements(const double matrix[][Globals::MAX_COL], const int maxRow) {
    double total = 0;

    for (int i = 0; i < maxRow; i++) {
        for (int j = 0; j < Globals::MAX_COL; j++) {
            total += matrix[i][j];
        }
    }

    return total / (maxRow * Globals::MAX_COL);
}

/**
 * In this function, we will check all of the numbers inside the matrix array and return the
 * largest one
 * @param matrix A constant variable of the matrix table
 * @param maxRow A constant variable of the maximum amount of rows in the array
 * @return Returns the largest number within the matrix array
*/
double findLargest(const double matrix[][Globals::MAX_COL], const int maxRow) {
    double largest = matrix[0][0];

    for (int i = 1; i < maxRow; i++) {
        for (int j = 0; j < Globals::MAX_COL; j++) {
			if (largest < matrix[i][j]) {
				largest = matrix[i][j];
			}
        }
    }

    return largest;
}
